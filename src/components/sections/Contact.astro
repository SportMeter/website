---
import Button from "@/components/primitives/Button.astro";
import {type FormField, type HTMLInputTypeAttribute } from "@/types/contact";

// Helper function to generate field names from titles
function getFieldName(title: string): string {
	const fieldMap: Record<string, string> = {
		"Volledige naam": "name",
		"Full name": "name",
		"E-mail": "email",
		"Email": "email",
		"Telefoon": "phone",
		"Phone": "phone",
		"Gewenste beltijd": "preferredCallTime",
		"Preferred call time": "preferredCallTime",
		"Bericht": "message",
		"Message": "message"
	};

	return fieldMap[title] || title.toLowerCase().replace(/\s+/g, '');
}

interface Props {
	message: string;
  privacyStatement: string;
	fields: FormField[];
}

const { message,privacyStatement, fields } = Astro.props;
---

<div
	class="items-center gap-x-[6.25rem] pb-40 auto-cols-fr justify-center flex"
	x-data="{
		isSubmitting: false,
		showSuccess: false,
		showError: false,
		errorMessage: '',
		async submitForm(event) {
			event.preventDefault();
			this.isSubmitting = true;
			this.showError = false;
			this.showSuccess = false;
			
			try {
				const formData = new FormData(event.target);
				const data = Object.fromEntries(formData.entries());

				const response = await fetch('/api/contact', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data)
				});
				
				const result = await response.json();
				
				if (response.ok) {
					this.showSuccess = true;
					event.target.reset();
				} else {
					this.showError = true;
					this.errorMessage = result.error || 'Something went wrong';
				}
			} catch (error) {
				this.showError = true;
				this.errorMessage = 'Network error. Please try again.';
			} finally {
				this.isSubmitting = false;
			}
		}
	}"
>
	<div class="col-span-1 row-span-1 w-full max-w-3xl">
		<h4 class=" mb-1 mt-10">
			{message}
		</h4>
		<div class="mt-8">
			<!-- Success Message -->
			<div x-show="showSuccess" x-transition class="mb-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-md">
				<p class="font-semibold">Message sent successfully!</p>
				<p>Thank you for contacting us. We'll get back to you soon.</p>
			</div>
			
			<!-- Error Message -->
			<div x-show="showError" x-transition class="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-md">
				<p class="font-semibold">Error:</p>
				<p x-text="errorMessage"></p>
			</div>

			<div class="mt-0 mx-0 mb-3.5">
				<form @submit="submitForm" method="POST" action="/api/contact" class="items-center auto-cols-fr grid-cols-1 sm:grid-cols-2 grid-rows-[auto] grid gap-8">
					{
						fields?.map((field) => {
							if (field.type === "submit") {
								return (
									<Button 
										type="submit" 
										class:list={[field.width == 2 && "sm:col-span-2"]}
										x-bind:disabled="isSubmitting"
									>
										<span x-show="!isSubmitting">{field.title}</span>
										<span x-show="isSubmitting" class="flex items-center">
											<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
												<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
												<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
											</svg>
											Sending...
										</span>
									</Button>
								);
							} else if (field.type === "textarea") {
								return (
									<div class:list={["text-base", field.width == 2 && "sm:col-span-2"]}>
										<p class="text-black font-semibold max-w-full mb-3">
											{field.title}
										</p>
										<textarea
											name={getFieldName(field.title)}
											required={field.required}
											placeholder={field.placeholder}
											class="text-zinc-800 cursor-text py-4 w-full border-2 border-black border-solid rounded-md m-0"
										/>
									</div>
								);
							} else {
								return (
									<div class:list={["text-base", field.width == 2 && "sm:col-span-2"]}>
										<p class="text-black font-semibold max-w-full mb-3">
											{field.title}
										</p>
										<input
											type={field.type as HTMLInputTypeAttribute}
											name={getFieldName(field.title)}
											required={field.required}
											placeholder={field.placeholder}
											class="text-zinc-800 cursor-text py-4 w-full h-14 min-h-[3.50rem] border-2 border-black border-solid rounded-md m-0"
										/>
									</div>
								);
							}
						})
					}
				</form>
        <a class="text-sm italic">* {privacyStatement}</a>
			</div>
		</div>
	</div>
</div>
